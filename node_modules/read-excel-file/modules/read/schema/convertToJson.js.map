{"version":3,"file":"convertToJson.js","names":["NumberType","StringType","BooleanType","DateType","DEFAULT_OPTIONS","isColumnOriented","data","schema","options","rowMap","ignoreEmptyRows","validateSchema","transpose","columns","results","errors","i","length","result","read","push","error","row","rows","rowIndex","object","isEmptyObject","createError","column","value","errorMessage","reason","type","pendingRequiredChecks","key","schemaEntry","isNestedSchema","Array","isArray","rawValue","indexOf","undefined","notEmpty","array","parseArray","map","_value","parseValue","required","includeNullValues","prop","Object","keys","parse","parseCustomValue","parseValueOfType","oneOf","validate","message","String","Number","Date","properties","Boolean","Error","name","getBlock","string","endCharacter","startIndex","substring","character","block","blocks","index","trim","_","entry"],"sources":["../../../source/read/schema/convertToJson.js"],"sourcesContent":["import NumberType from '../../types/Number.js'\r\nimport StringType from '../../types/String.js'\r\nimport BooleanType from '../../types/Boolean.js'\r\nimport DateType from '../../types/Date.js'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n  isColumnOriented: false\r\n}\r\n\r\n/**\r\n * Convert 2D array to nested objects.\r\n * If row oriented data, row 0 is dotted key names.\r\n * Column oriented data is transposed.\r\n * @param {any[][]} data - An array of rows, each row being an array of cells.\r\n * @param {object} schema\r\n * @return {object[]}\r\n */\r\nexport default function(data, schema, options) {\r\n  if (options) {\r\n    options = {\r\n      ...DEFAULT_OPTIONS,\r\n      ...options\r\n    }\r\n  } else {\r\n    options = DEFAULT_OPTIONS\r\n  }\r\n\r\n  const {\r\n    isColumnOriented,\r\n    rowMap,\r\n    ignoreEmptyRows\r\n  } = options\r\n\r\n  validateSchema(schema)\r\n\r\n  if (isColumnOriented) {\r\n    data = transpose(data)\r\n  }\r\n\r\n  const columns = data[0]\r\n\r\n  const results = []\r\n  const errors = []\r\n\r\n  for (let i = 1; i < data.length; i++) {\r\n    const result = read(schema, data[i], i, columns, errors, options)\r\n    if (result !== null || ignoreEmptyRows === false) {\r\n      results.push(result)\r\n    }\r\n  }\r\n\r\n  // Correct error rows.\r\n  if (rowMap) {\r\n    for (const error of errors) {\r\n      // Convert the `row` index in `data` to the\r\n      // actual `row` index in the spreadsheet.\r\n      // `- 1` converts row number to row index.\r\n      // `+ 1` converts row index to row number.\r\n      error.row = rowMap[error.row - 1] + 1\r\n    }\r\n  }\r\n\r\n  return {\r\n    rows: results,\r\n    errors\r\n  }\r\n}\r\n\r\nfunction read(schema, row, rowIndex, columns, errors, options) {\r\n  const object = {}\r\n  let isEmptyObject = true\r\n\r\n  const createError = ({\r\n    column,\r\n    value,\r\n    error: errorMessage,\r\n    reason\r\n  }) => {\r\n    const error = {\r\n      error: errorMessage,\r\n      row: rowIndex + 1,\r\n      column,\r\n      value\r\n    }\r\n    if (reason) {\r\n      error.reason = reason\r\n    }\r\n    if (schema[column].type) {\r\n      error.type = schema[column].type\r\n    }\r\n    return error\r\n  }\r\n\r\n  const pendingRequiredChecks = []\r\n\r\n  for (const key of Object.keys(schema)) {\r\n    const schemaEntry = schema[key]\r\n    const isNestedSchema = typeof schemaEntry.type === 'object' && !Array.isArray(schemaEntry.type)\r\n\r\n    let rawValue = row[columns.indexOf(key)]\r\n    if (rawValue === undefined) {\r\n      rawValue = null\r\n    }\r\n\r\n    let value\r\n    let error\r\n    let reason\r\n\r\n    if (isNestedSchema) {\r\n      value = read(schemaEntry.type, row, rowIndex, columns, errors, options)\r\n    } else {\r\n      if (rawValue === null) {\r\n        value = null\r\n      }\r\n      else if (Array.isArray(schemaEntry.type)) {\r\n        let notEmpty = false\r\n        const array = parseArray(rawValue).map((_value) => {\r\n          const result = parseValue(_value, schemaEntry, options)\r\n          if (result.error) {\r\n            value = _value\r\n            error = result.error\r\n            reason = result.reason\r\n          }\r\n          if (result.value !== null) {\r\n            notEmpty = true\r\n          }\r\n          return result.value\r\n        })\r\n        if (!error) {\r\n          value = notEmpty ? array : null\r\n        }\r\n      } else {\r\n        const result = parseValue(rawValue, schemaEntry, options)\r\n        error = result.error\r\n        reason = result.reason\r\n        value = error ? rawValue : result.value\r\n      }\r\n    }\r\n\r\n    if (!error && value === null) {\r\n      if (typeof schemaEntry.required === 'function') {\r\n        pendingRequiredChecks.push({ column: key })\r\n      } else if (schemaEntry.required === true) {\r\n        error = 'required'\r\n      }\r\n    }\r\n\r\n    if (error) {\r\n      errors.push(createError({\r\n        column: key,\r\n        value,\r\n        error,\r\n        reason\r\n      }))\r\n    } else {\r\n      if (isEmptyObject && value !== null) {\r\n        isEmptyObject = false\r\n      }\r\n      if (value !== null || options.includeNullValues) {\r\n        object[schemaEntry.prop] = value\r\n      }\r\n    }\r\n  }\r\n\r\n  if (isEmptyObject) {\r\n    return null\r\n  }\r\n\r\n  for (const { column } of pendingRequiredChecks) {\r\n    const required = schema[column].required(object)\r\n    if (required) {\r\n      errors.push(createError({\r\n        column,\r\n        value: null,\r\n        error: 'required'\r\n      }))\r\n    }\r\n  }\r\n\r\n  return object\r\n}\r\n\r\n/**\r\n * Converts textual value to a javascript typed value.\r\n * @param  {any} value\r\n * @param  {object} schemaEntry\r\n * @return {{ value: any, error: string }}\r\n */\r\nexport function parseValue(value, schemaEntry, options) {\r\n  if (value === null) {\r\n    return { value: null }\r\n  }\r\n  let result\r\n  if (schemaEntry.parse) {\r\n    result = parseCustomValue(value, schemaEntry.parse)\r\n  } else if (schemaEntry.type) {\r\n    result = parseValueOfType(\r\n      value,\r\n      // Supports parsing array types.\r\n      // See `parseArray()` function for more details.\r\n      // Example `type`: String[]\r\n      // Input: 'Barack Obama, \"String, with, colons\", Donald Trump'\r\n      // Output: ['Barack Obama', 'String, with, colons', 'Donald Trump']\r\n      Array.isArray(schemaEntry.type) ? schemaEntry.type[0] : schemaEntry.type,\r\n      options\r\n    )\r\n  } else {\r\n    result = { value: value }\r\n    // throw new Error('Invalid schema entry: no .type and no .parse():\\n\\n' + JSON.stringify(schemaEntry, null, 2))\r\n  }\r\n  // If errored then return the error.\r\n  if (result.error) {\r\n    return result\r\n  }\r\n  if (result.value !== null) {\r\n    if (schemaEntry.oneOf && schemaEntry.oneOf.indexOf(result.value) < 0) {\r\n      return { error: 'invalid', reason: 'unknown' }\r\n    }\r\n    if (schemaEntry.validate) {\r\n      try {\r\n        schemaEntry.validate(result.value)\r\n      } catch (error) {\r\n        return { error: error.message }\r\n      }\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n * Converts textual value to a custom value using supplied `.parse()`.\r\n * @param  {any} value\r\n * @param  {function} parse\r\n * @return {{ value: any, error: string }}\r\n */\r\nfunction parseCustomValue(value, parse) {\r\n  try {\r\n    value = parse(value)\r\n    if (value === undefined) {\r\n      return { value: null }\r\n    }\r\n    return { value }\r\n  } catch (error) {\r\n    const result = { error: error.message }\r\n    if (error.reason) {\r\n      result.reason = error.reason;\r\n    }\r\n    return result\r\n  }\r\n}\r\n\r\n/**\r\n * Converts textual value to a javascript typed value.\r\n * @param  {any} value\r\n * @param  {} type\r\n * @return {{ value: (string|number|Date|boolean), error: string, reason?: string }}\r\n */\r\nfunction parseValueOfType(value, type, options) {\r\n  switch (type) {\r\n    case String:\r\n      return parseCustomValue(value, StringType)\r\n\r\n    case Number:\r\n      return parseCustomValue(value, NumberType)\r\n\r\n    case Date:\r\n      return parseCustomValue(value, (value) => DateType(value, { properties: options.properties }))\r\n\r\n    case Boolean:\r\n      return parseCustomValue(value, BooleanType)\r\n\r\n    default:\r\n      if (typeof type === 'function') {\r\n        return parseCustomValue(value, type)\r\n      }\r\n      throw new Error(`Unsupported schema type: ${type && type.name || type}`)\r\n  }\r\n}\r\n\r\nexport function getBlock(string, endCharacter, startIndex) {\r\n  let i = 0\r\n  let substring = ''\r\n  let character\r\n  while (startIndex + i < string.length) {\r\n    const character = string[startIndex + i]\r\n    if (character === endCharacter) {\r\n      return [substring, i]\r\n    }\r\n    else if (character === '\"') {\r\n      const block = getBlock(string, '\"', startIndex + i + 1)\r\n      substring += block[0]\r\n      i += '\"'.length + block[1] + '\"'.length\r\n    }\r\n    else {\r\n      substring += character\r\n      i++\r\n    }\r\n  }\r\n  return [substring, i]\r\n}\r\n\r\n/**\r\n * Parses a string of comma-separated substrings into an array of substrings.\r\n * (the `export` is just for tests)\r\n * @param  {string} string â€” A string of comma-separated substrings.\r\n * @return {string[]} An array of substrings.\r\n */\r\nexport function parseArray(string) {\r\n  const blocks = []\r\n  let index = 0\r\n  while (index < string.length) {\r\n    const [substring, length] = getBlock(string, ',', index)\r\n    index += length + ','.length\r\n    blocks.push(substring.trim())\r\n  }\r\n  return blocks\r\n}\r\n\r\n// Transpose a 2D array.\r\n// https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript\r\nconst transpose = array => array[0].map((_, i) => array.map(row => row[i]))\r\n\r\nfunction validateSchema(schema) {\r\n  for (const key of Object.keys(schema)) {\r\n    const entry = schema[key]\r\n    if (!entry.prop) {\r\n      throw new Error(`\"prop\" not defined for schema entry \"${key}\".`)\r\n    }\r\n  }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,UAAP,MAAuB,uBAAvB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA,IAAMC,eAAe,GAAG;EACtBC,gBAAgB,EAAE;AADI,CAAxB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,UAASC,IAAT,EAAeC,MAAf,EAAuBC,OAAvB,EAAgC;EAC7C,IAAIA,OAAJ,EAAa;IACXA,OAAO,mCACFJ,eADE,GAEFI,OAFE,CAAP;EAID,CALD,MAKO;IACLA,OAAO,GAAGJ,eAAV;EACD;;EAED,eAIII,OAJJ;EAAA,IACEH,gBADF,YACEA,gBADF;EAAA,IAEEI,MAFF,YAEEA,MAFF;EAAA,IAGEC,eAHF,YAGEA,eAHF;EAMAC,cAAc,CAACJ,MAAD,CAAd;;EAEA,IAAIF,gBAAJ,EAAsB;IACpBC,IAAI,GAAGM,SAAS,CAACN,IAAD,CAAhB;EACD;;EAED,IAAMO,OAAO,GAAGP,IAAI,CAAC,CAAD,CAApB;EAEA,IAAMQ,OAAO,GAAG,EAAhB;EACA,IAAMC,MAAM,GAAG,EAAf;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,IAAI,CAACW,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;IACpC,IAAME,MAAM,GAAGC,IAAI,CAACZ,MAAD,EAASD,IAAI,CAACU,CAAD,CAAb,EAAkBA,CAAlB,EAAqBH,OAArB,EAA8BE,MAA9B,EAAsCP,OAAtC,CAAnB;;IACA,IAAIU,MAAM,KAAK,IAAX,IAAmBR,eAAe,KAAK,KAA3C,EAAkD;MAChDI,OAAO,CAACM,IAAR,CAAaF,MAAb;IACD;EACF,CAhC4C,CAkC7C;;;EACA,IAAIT,MAAJ,EAAY;IACV,qDAAoBM,MAApB,wCAA4B;MAAA,IAAjBM,KAAiB;MAC1B;MACA;MACA;MACA;MACAA,KAAK,CAACC,GAAN,GAAYb,MAAM,CAACY,KAAK,CAACC,GAAN,GAAY,CAAb,CAAN,GAAwB,CAApC;IACD;EACF;;EAED,OAAO;IACLC,IAAI,EAAET,OADD;IAELC,MAAM,EAANA;EAFK,CAAP;AAID;;AAED,SAASI,IAAT,CAAcZ,MAAd,EAAsBe,GAAtB,EAA2BE,QAA3B,EAAqCX,OAArC,EAA8CE,MAA9C,EAAsDP,OAAtD,EAA+D;EAC7D,IAAMiB,MAAM,GAAG,EAAf;EACA,IAAIC,aAAa,GAAG,IAApB;;EAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAKd;IAAA,IAJJC,MAII,QAJJA,MAII;IAAA,IAHJC,KAGI,QAHJA,KAGI;IAAA,IAFGC,YAEH,QAFJT,KAEI;IAAA,IADJU,MACI,QADJA,MACI;IACJ,IAAMV,KAAK,GAAG;MACZA,KAAK,EAAES,YADK;MAEZR,GAAG,EAAEE,QAAQ,GAAG,CAFJ;MAGZI,MAAM,EAANA,MAHY;MAIZC,KAAK,EAALA;IAJY,CAAd;;IAMA,IAAIE,MAAJ,EAAY;MACVV,KAAK,CAACU,MAAN,GAAeA,MAAf;IACD;;IACD,IAAIxB,MAAM,CAACqB,MAAD,CAAN,CAAeI,IAAnB,EAAyB;MACvBX,KAAK,CAACW,IAAN,GAAazB,MAAM,CAACqB,MAAD,CAAN,CAAeI,IAA5B;IACD;;IACD,OAAOX,KAAP;EACD,CAnBD;;EAqBA,IAAMY,qBAAqB,GAAG,EAA9B;;EAzB6D;IA2BxD,IAAMC,GAAG,mBAAT;IACH,IAAMC,WAAW,GAAG5B,MAAM,CAAC2B,GAAD,CAA1B;IACA,IAAME,cAAc,GAAG,QAAOD,WAAW,CAACH,IAAnB,MAA4B,QAA5B,IAAwC,CAACK,KAAK,CAACC,OAAN,CAAcH,WAAW,CAACH,IAA1B,CAAhE;IAEA,IAAIO,QAAQ,GAAGjB,GAAG,CAACT,OAAO,CAAC2B,OAAR,CAAgBN,GAAhB,CAAD,CAAlB;;IACA,IAAIK,QAAQ,KAAKE,SAAjB,EAA4B;MAC1BF,QAAQ,GAAG,IAAX;IACD;;IAED,IAAIV,KAAK,SAAT;IACA,IAAIR,KAAK,SAAT;IACA,IAAIU,MAAM,SAAV;;IAEA,IAAIK,cAAJ,EAAoB;MAClBP,KAAK,GAAGV,IAAI,CAACgB,WAAW,CAACH,IAAb,EAAmBV,GAAnB,EAAwBE,QAAxB,EAAkCX,OAAlC,EAA2CE,MAA3C,EAAmDP,OAAnD,CAAZ;IACD,CAFD,MAEO;MACL,IAAI+B,QAAQ,KAAK,IAAjB,EAAuB;QACrBV,KAAK,GAAG,IAAR;MACD,CAFD,MAGK,IAAIQ,KAAK,CAACC,OAAN,CAAcH,WAAW,CAACH,IAA1B,CAAJ,EAAqC;QACxC,IAAIU,QAAQ,GAAG,KAAf;QACA,IAAMC,KAAK,GAAGC,UAAU,CAACL,QAAD,CAAV,CAAqBM,GAArB,CAAyB,UAACC,MAAD,EAAY;UACjD,IAAM5B,MAAM,GAAG6B,UAAU,CAACD,MAAD,EAASX,WAAT,EAAsB3B,OAAtB,CAAzB;;UACA,IAAIU,MAAM,CAACG,KAAX,EAAkB;YAChBQ,KAAK,GAAGiB,MAAR;YACAzB,KAAK,GAAGH,MAAM,CAACG,KAAf;YACAU,MAAM,GAAGb,MAAM,CAACa,MAAhB;UACD;;UACD,IAAIb,MAAM,CAACW,KAAP,KAAiB,IAArB,EAA2B;YACzBa,QAAQ,GAAG,IAAX;UACD;;UACD,OAAOxB,MAAM,CAACW,KAAd;QACD,CAXa,CAAd;;QAYA,IAAI,CAACR,KAAL,EAAY;UACVQ,KAAK,GAAGa,QAAQ,GAAGC,KAAH,GAAW,IAA3B;QACD;MACF,CAjBI,MAiBE;QACL,IAAMzB,MAAM,GAAG6B,UAAU,CAACR,QAAD,EAAWJ,WAAX,EAAwB3B,OAAxB,CAAzB;QACAa,KAAK,GAAGH,MAAM,CAACG,KAAf;QACAU,MAAM,GAAGb,MAAM,CAACa,MAAhB;QACAF,KAAK,GAAGR,KAAK,GAAGkB,QAAH,GAAcrB,MAAM,CAACW,KAAlC;MACD;IACF;;IAED,IAAI,CAACR,KAAD,IAAUQ,KAAK,KAAK,IAAxB,EAA8B;MAC5B,IAAI,OAAOM,WAAW,CAACa,QAAnB,KAAgC,UAApC,EAAgD;QAC9Cf,qBAAqB,CAACb,IAAtB,CAA2B;UAAEQ,MAAM,EAAEM;QAAV,CAA3B;MACD,CAFD,MAEO,IAAIC,WAAW,CAACa,QAAZ,KAAyB,IAA7B,EAAmC;QACxC3B,KAAK,GAAG,UAAR;MACD;IACF;;IAED,IAAIA,KAAJ,EAAW;MACTN,MAAM,CAACK,IAAP,CAAYO,WAAW,CAAC;QACtBC,MAAM,EAAEM,GADc;QAEtBL,KAAK,EAALA,KAFsB;QAGtBR,KAAK,EAALA,KAHsB;QAItBU,MAAM,EAANA;MAJsB,CAAD,CAAvB;IAMD,CAPD,MAOO;MACL,IAAIL,aAAa,IAAIG,KAAK,KAAK,IAA/B,EAAqC;QACnCH,aAAa,GAAG,KAAhB;MACD;;MACD,IAAIG,KAAK,KAAK,IAAV,IAAkBrB,OAAO,CAACyC,iBAA9B,EAAiD;QAC/CxB,MAAM,CAACU,WAAW,CAACe,IAAb,CAAN,GAA2BrB,KAA3B;MACD;IACF;EA7F0D;;EA2B7D,gCAAkBsB,MAAM,CAACC,IAAP,CAAY7C,MAAZ,CAAlB,kCAAuC;IAAA;EAmEtC;;EAED,IAAImB,aAAJ,EAAmB;IACjB,OAAO,IAAP;EACD;;EAED,0CAAyBO,qBAAzB,6CAAgD;IAA3C,IAAQL,MAAR,8BAAQA,MAAR;IACH,IAAMoB,QAAQ,GAAGzC,MAAM,CAACqB,MAAD,CAAN,CAAeoB,QAAf,CAAwBvB,MAAxB,CAAjB;;IACA,IAAIuB,QAAJ,EAAc;MACZjC,MAAM,CAACK,IAAP,CAAYO,WAAW,CAAC;QACtBC,MAAM,EAANA,MADsB;QAEtBC,KAAK,EAAE,IAFe;QAGtBR,KAAK,EAAE;MAHe,CAAD,CAAvB;IAKD;EACF;;EAED,OAAOI,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASsB,UAAT,CAAoBlB,KAApB,EAA2BM,WAA3B,EAAwC3B,OAAxC,EAAiD;EACtD,IAAIqB,KAAK,KAAK,IAAd,EAAoB;IAClB,OAAO;MAAEA,KAAK,EAAE;IAAT,CAAP;EACD;;EACD,IAAIX,MAAJ;;EACA,IAAIiB,WAAW,CAACkB,KAAhB,EAAuB;IACrBnC,MAAM,GAAGoC,gBAAgB,CAACzB,KAAD,EAAQM,WAAW,CAACkB,KAApB,CAAzB;EACD,CAFD,MAEO,IAAIlB,WAAW,CAACH,IAAhB,EAAsB;IAC3Bd,MAAM,GAAGqC,gBAAgB,CACvB1B,KADuB,EAEvB;IACA;IACA;IACA;IACA;IACAQ,KAAK,CAACC,OAAN,CAAcH,WAAW,CAACH,IAA1B,IAAkCG,WAAW,CAACH,IAAZ,CAAiB,CAAjB,CAAlC,GAAwDG,WAAW,CAACH,IAP7C,EAQvBxB,OARuB,CAAzB;EAUD,CAXM,MAWA;IACLU,MAAM,GAAG;MAAEW,KAAK,EAAEA;IAAT,CAAT,CADK,CAEL;EACD,CArBqD,CAsBtD;;;EACA,IAAIX,MAAM,CAACG,KAAX,EAAkB;IAChB,OAAOH,MAAP;EACD;;EACD,IAAIA,MAAM,CAACW,KAAP,KAAiB,IAArB,EAA2B;IACzB,IAAIM,WAAW,CAACqB,KAAZ,IAAqBrB,WAAW,CAACqB,KAAZ,CAAkBhB,OAAlB,CAA0BtB,MAAM,CAACW,KAAjC,IAA0C,CAAnE,EAAsE;MACpE,OAAO;QAAER,KAAK,EAAE,SAAT;QAAoBU,MAAM,EAAE;MAA5B,CAAP;IACD;;IACD,IAAII,WAAW,CAACsB,QAAhB,EAA0B;MACxB,IAAI;QACFtB,WAAW,CAACsB,QAAZ,CAAqBvC,MAAM,CAACW,KAA5B;MACD,CAFD,CAEE,OAAOR,KAAP,EAAc;QACd,OAAO;UAAEA,KAAK,EAAEA,KAAK,CAACqC;QAAf,CAAP;MACD;IACF;EACF;;EACD,OAAOxC,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,SAASoC,gBAAT,CAA0BzB,KAA1B,EAAiCwB,KAAjC,EAAwC;EACtC,IAAI;IACFxB,KAAK,GAAGwB,KAAK,CAACxB,KAAD,CAAb;;IACA,IAAIA,KAAK,KAAKY,SAAd,EAAyB;MACvB,OAAO;QAAEZ,KAAK,EAAE;MAAT,CAAP;IACD;;IACD,OAAO;MAAEA,KAAK,EAALA;IAAF,CAAP;EACD,CAND,CAME,OAAOR,KAAP,EAAc;IACd,IAAMH,MAAM,GAAG;MAAEG,KAAK,EAAEA,KAAK,CAACqC;IAAf,CAAf;;IACA,IAAIrC,KAAK,CAACU,MAAV,EAAkB;MAChBb,MAAM,CAACa,MAAP,GAAgBV,KAAK,CAACU,MAAtB;IACD;;IACD,OAAOb,MAAP;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASqC,gBAAT,CAA0B1B,KAA1B,EAAiCG,IAAjC,EAAuCxB,OAAvC,EAAgD;EAC9C,QAAQwB,IAAR;IACE,KAAK2B,MAAL;MACE,OAAOL,gBAAgB,CAACzB,KAAD,EAAQ5B,UAAR,CAAvB;;IAEF,KAAK2D,MAAL;MACE,OAAON,gBAAgB,CAACzB,KAAD,EAAQ7B,UAAR,CAAvB;;IAEF,KAAK6D,IAAL;MACE,OAAOP,gBAAgB,CAACzB,KAAD,EAAQ,UAACA,KAAD;QAAA,OAAW1B,QAAQ,CAAC0B,KAAD,EAAQ;UAAEiC,UAAU,EAAEtD,OAAO,CAACsD;QAAtB,CAAR,CAAnB;MAAA,CAAR,CAAvB;;IAEF,KAAKC,OAAL;MACE,OAAOT,gBAAgB,CAACzB,KAAD,EAAQ3B,WAAR,CAAvB;;IAEF;MACE,IAAI,OAAO8B,IAAP,KAAgB,UAApB,EAAgC;QAC9B,OAAOsB,gBAAgB,CAACzB,KAAD,EAAQG,IAAR,CAAvB;MACD;;MACD,MAAM,IAAIgC,KAAJ,oCAAsChC,IAAI,IAAIA,IAAI,CAACiC,IAAb,IAAqBjC,IAA3D,EAAN;EAjBJ;AAmBD;;AAED,OAAO,SAASkC,QAAT,CAAkBC,MAAlB,EAA0BC,YAA1B,EAAwCC,UAAxC,EAAoD;EACzD,IAAIrD,CAAC,GAAG,CAAR;EACA,IAAIsD,SAAS,GAAG,EAAhB;EACA,IAAIC,SAAJ;;EACA,OAAOF,UAAU,GAAGrD,CAAb,GAAiBmD,MAAM,CAAClD,MAA/B,EAAuC;IACrC,IAAMsD,UAAS,GAAGJ,MAAM,CAACE,UAAU,GAAGrD,CAAd,CAAxB;;IACA,IAAIuD,UAAS,KAAKH,YAAlB,EAAgC;MAC9B,OAAO,CAACE,SAAD,EAAYtD,CAAZ,CAAP;IACD,CAFD,MAGK,IAAIuD,UAAS,KAAK,GAAlB,EAAuB;MAC1B,IAAMC,KAAK,GAAGN,QAAQ,CAACC,MAAD,EAAS,GAAT,EAAcE,UAAU,GAAGrD,CAAb,GAAiB,CAA/B,CAAtB;MACAsD,SAAS,IAAIE,KAAK,CAAC,CAAD,CAAlB;MACAxD,CAAC,IAAI,IAAIC,MAAJ,GAAauD,KAAK,CAAC,CAAD,CAAlB,GAAwB,IAAIvD,MAAjC;IACD,CAJI,MAKA;MACHqD,SAAS,IAAIC,UAAb;MACAvD,CAAC;IACF;EACF;;EACD,OAAO,CAACsD,SAAD,EAAYtD,CAAZ,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS4B,UAAT,CAAoBuB,MAApB,EAA4B;EACjC,IAAMM,MAAM,GAAG,EAAf;EACA,IAAIC,KAAK,GAAG,CAAZ;;EACA,OAAOA,KAAK,GAAGP,MAAM,CAAClD,MAAtB,EAA8B;IAC5B,gBAA4BiD,QAAQ,CAACC,MAAD,EAAS,GAAT,EAAcO,KAAd,CAApC;IAAA;IAAA,IAAOJ,SAAP;IAAA,IAAkBrD,MAAlB;;IACAyD,KAAK,IAAIzD,MAAM,GAAG,IAAIA,MAAtB;IACAwD,MAAM,CAACrD,IAAP,CAAYkD,SAAS,CAACK,IAAV,EAAZ;EACD;;EACD,OAAOF,MAAP;AACD,C,CAED;AACA;;AACA,IAAM7D,SAAS,GAAG,SAAZA,SAAY,CAAA+B,KAAK;EAAA,OAAIA,KAAK,CAAC,CAAD,CAAL,CAASE,GAAT,CAAa,UAAC+B,CAAD,EAAI5D,CAAJ;IAAA,OAAU2B,KAAK,CAACE,GAAN,CAAU,UAAAvB,GAAG;MAAA,OAAIA,GAAG,CAACN,CAAD,CAAP;IAAA,CAAb,CAAV;EAAA,CAAb,CAAJ;AAAA,CAAvB;;AAEA,SAASL,cAAT,CAAwBJ,MAAxB,EAAgC;EAC9B,kCAAkB4C,MAAM,CAACC,IAAP,CAAY7C,MAAZ,CAAlB,qCAAuC;IAAlC,IAAM2B,GAAG,qBAAT;IACH,IAAM2C,KAAK,GAAGtE,MAAM,CAAC2B,GAAD,CAApB;;IACA,IAAI,CAAC2C,KAAK,CAAC3B,IAAX,EAAiB;MACf,MAAM,IAAIc,KAAJ,mDAAkD9B,GAAlD,SAAN;IACD;EACF;AACF"}